input {
  jdbc {
    ##### 1단계 #####=> 매번 똑같은 데이터 계속 가지고옴!
    # jdbc_driver_library => '/usr/share/logstash/mysql-connector-java-8.0.28.jar'
    # jdbc_driver_class => 'com.mysql.cj.jdbc.Driver'
    # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
    # jdbc_user => 'root'
    # jdbc_password => 'root!'
    # schedule => '* * * * *'
    # statement => 'select * from product'

    ##### 2단계 #####=> updatedAt을 만들어 최신 정보로 업데이트되었을 때 저장! 그러나 ms단위가 잘린다.
    # jdbc_driver_library => '/usr/share/logstash/mysql-connector-java-8.0.28.jar'
    # jdbc_driver_class => 'com.mysql.cj.jdbc.Driver'
    # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
    # jdbc_user => 'root'
    # jdbc_password => 'root!'
    # schedule => '* * * * *'
    # use_column_value => true #컬럼 벨류를 사용!
    # tracking_column => "updatedat"# 추적
    # tracking_column_type => "timestamp"
    # last_run_metadata_path => "./aaa.txt"#마지막에 실행한 데이터를 이 파일에 저장
    # statement => 'select id, name, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc'
  
  
    ##### 3단계 #####=> ms단위가 처리
    # jdbc_driver_library => '/usr/share/logstash/mysql-connector-java-8.0.28.jar'
    # jdbc_driver_class => 'com.mysql.cj.jdbc.Driver'
    # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
    # jdbc_user => 'root'
    # jdbc_password => 'root!'
    # schedule => '* * * * *'
    # use_column_value => true 
    # tracking_column => "updatedat"
    # last_run_metadata_path => "./aaa.txt"
    # tracking_column_type => "numeric"
    # statement => 'select id, name, price, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc'
    jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
    jdbc_user => "root"
    jdbc_password => "root!"
    schedule => "* * * * *"
    use_column_value => true
    tracking_column => "updatedat"
    last_run_metadata_path => "./aaa.txt"
    tracking_column_type => "numeric"
    statement => "select id, name, price, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
  }
}

output {
  elasticsearch {
    hosts => 'elasticsearch:9200'
    index => 'myproduct'
  }
}